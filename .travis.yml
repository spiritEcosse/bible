language: cpp

env:
  global:
    # Global build options and C++ flags
    - CXX_FLAGS="-Wall -Wpedantic -Werror -Wno-variadic-macros -Wno-long-long -Wno-shadow"
    - CMAKE_VERSION=3.19.3
    - DEPS_DIR=${TRAVIS_BUILD_DIR}/deps

matrix:
 include:
  - os: linux
    dist: 21.04
    sudo: required
    compiler: g++
    env:
      - QT_BASE=56
    addons:
      apt:
        packages: 
          - g++
          - valgrind
          # Misc
          - python-yaml
          - lcov
          - libopencv-dev
          - mesa-common-dev
          - libglu1-mesa-dev
          - qtbase5-dev

before_install:
  - if [ "$QT_BASE" = "56" ]; then sudo add-apt-repository ppa:beineri/opt-qt562-xenial -y; sudo apt-get update; fi

install:
  - if [ "$QT_BASE" = "56" ]; then sudo apt-get install -qq qt56base; source /opt/qt56/bin/qt56-env.sh; fi
  - if [ "$CXX" = "clang++" ] && [ "$TRAVIS_OS_NAME" = "linux" ]; then export CXX="clang++-6.0" CC="clang-6.0"; fi
  - echo ${PATH}
  - echo ${CXX}
  - ${CXX} --version
  - ${CXX} -v
  - sudo pip install codecov

  # Download and install recent cmake
  - |
    if [[ ${TRAVIS_OS_NAME} == "linux" ]]; then
      CMAKE_URL="https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/cmake-${CMAKE_VERSION}-linux-x86_64.tar.gz"
      sudo mkdir -p ${DEPS_DIR}/cmake
      travis_retry wget --no-check-certificate --quiet -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C ${DEPS_DIR}/cmake
      export PATH=${DEPS_DIR}/cmake/bin:${PATH}
    fi

notifications:
  email: false

script:
  ############################################################################
  # Build main and tests
  ############################################################################
  - echo "gcc -v && g++ -v && cmake --version: " && gcc -v && g++ -v && cmake --version
  - mkdir -p build
  - cd build
  - cmake ${CMAKE_OPTIONS} -DCMAKE_CXX_FLAGS=${CXX_FLAGS} -DCMAKE_BUILD_TYPE=Coverage -DBUILD_TESTING=ON .. 
  - make
  - make bible_coverage
  - ctest

after_success:
  # Codecov
  # Create lcov report
  - lcov --capture --directory . --output-file coverage.info
  - lcov --remove coverage.info '/usr/*' --output-file coverage.info # filter system-files
  - lcov --list coverage.info # debug info
  # Uploading report to CodeCov
  - bash <(curl -s https://codecov.io/bash) -f coverage.info || echo "Codecov did not collect coverage reports"
