language: cpp

env:
  global:
    # Global build options and C++ flags
    - CXX_FLAGS="-Wall -Wpedantic -Werror -Wno-variadic-macros -Wno-long-long -Wno-shadow"
    - CMAKE_VERSION=3.19.3
    - DEPS_DIR=${TRAVIS_BUILD_DIR}/deps
    - CMAKE_URL="https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/cmake-${CMAKE_VERSION}-linux-x86_64.tar.gz"

matrix:
 include:
  - os: linux
    dist: xenial
    sudo: required
    compiler: gcc
    addons:
      apt:
        sources:
          - ubuntu-toolchain-r-test
          - sourceline: 'ppa:beineri/opt-qt563-xenial'
        update: true
        packages:
          - qt56base
          - qt56tools
          - gcc-9
          - g++-9
          - libc6-i386
          - libgl-dev
          - libgl1-mesa-dev
          - mesa-common-dev
          - valgrind
          # Misc
          - python-yaml
          - lcov

install:
  - sudo pip install codecov

  # Download and install cmake
  - |
    if [[ ${TRAVIS_OS_NAME} == "linux" ]]; then
      sudo wget --no-check-certificate --quiet -O - ${CMAKE_URL} | sudo tar --strip-components=1 -xz -C ${DEPS_DIR}/cmake
      export PATH=${DEPS_DIR}/cmake/bin:${PATH}
    fi

notifications:
  email: false

script:
  ############################################################################
  # Build main and tests
  ############################################################################
  - /opt/qt514/bin/qt514-env.sh
  - echo ${PATH}
  - echo ${CXX}
  - ${CXX} --version
  - ${CXX} -v
  - mkdir -p build
  - cd build
  - cmake ${CMAKE_OPTIONS} -DCMAKE_CXX_FLAGS=${CXX_FLAGS} -DCMAKE_BUILD_TYPE=Coverage -DBUILD_TESTING=ON .. 
  - make
  - make bible_coverage
  - ctest

after_success:
  # Codecov
  # Create lcov report
  - lcov --capture --directory . --output-file coverage.info
  - lcov --remove coverage.info '/usr/*' --output-file coverage.info # filter system-files
  - lcov --list coverage.info # debug info
  # Uploading report to CodeCov
  - bash <(curl -s https://codecov.io/bash) -f coverage.info || echo "Codecov did not collect coverage reports"
